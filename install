#!/usr/bin/env bash
#
# Author: Alalilacias
# Description: Installs dotfiles into system not configured by them.
# Syntax: ./install
# Version: 0.1

# TODO Finish setting up the script. That includes:
# - Add support for more package managers.
# - Add support for more development environments.
# - Add logger functionality. Preemptive thanks to Graham Watson for the logger script.
# - Look into better code organitzation, perhaps compartimentalization and the value of it, or lack thereof.

# Variables
FORCE=false
PACKAGE_MANAGER=""

# Logging helper funciton, to avoid duplicating echo.
readopts() {
  TEMP=$(getopt -o d:hf --long devenv:,help,force -n "installing script" -- "$@")

  eval set -- "$TEMP"

  while true; do
    case "$1" in
      -d | --devenv)
        if [[ -n "$2" ]]; then
          DEVENV="$2"
          shift 2
        else
          log "Error: --devenv requires an argument."
          usage
          exit 1
        fi
        ;;
      -h | --help)
        usage
        exit 0
        ;;
      -f | --force)
        FORCE=true
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        log "Error: Invalid option $1"
        shift
        ;;
    esac
  done
}
# Help function, invoke on mistakes and whenever the user asks for it.
usage() {
  cat << EOF
  Usage $0 [options]
  -d| --devenv  Specify the development environment to install. 
                Remember to include at least a single environment.
                More than one works provided they're separated by commas not spaces (e.g. java,cpp,server).
                Lack of specification will install all environments.
  -h| --help    Show this help message
  -f| --force   Force installation, overwriting existing files
  
  EOF
}



extract_pm() {
  if command -v apt >/dev/null 2>&1; then
    return "apt"  # Debian-based
  elif command -v pacman >/dev/null 2>&1; then
    return "pacman"  # Arch-based
  else
    log "Package manager not supported, skipping installation of packages no supported outside of them."
  fi
}

main() {
  PACKAGE_MANAGER=$(extract_pm)
  # Set error exit.
  set -e


  # Source pre-configured installation files.
  (. "$HOME/.dotfiles/.config/dotfiles/essential-installs")
  (. "$HOME/.dotfiles/.config/dotfiles/connections")
  (. "$HOME/.dotfiles/.config/dotfiles/optional-installs")
}

main
